name: VPS Full Backup & SSHX (All Files Everywhere)

on:
  workflow_dispatch:

jobs:
  vps:
    runs-on: ubuntu-latest
    timeout-minutes: 335

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Restore latest VPS backup safely
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "üîÅ Restoring latest VPS backup..."
          cd $GITHUB_WORKSPACE
          rm -rf vps_restore
          mkdir -p vps_restore
          cd vps_restore
          
          git clone --branch vps-backups https://$PAT_TOKEN@github.com/${{ github.repository }} . || echo "‚ö†Ô∏è No backups found."
          
          # Detect all parts of the latest backup
          LATEST_BASE=$(ls -1tr vps_backup_*.tar.gz.* 2>/dev/null | tail -n 1 | sed 's/\.part[0-9]*$//')
          
          if [ -n "$LATEST_BASE" ]; then
              echo "‚úÖ Concatenating split tar files..."
              cat ${LATEST_BASE}.tar.gz.* > full_backup.tar.gz
              
              echo "‚úÖ Extracting full backup..."
              sudo tar -xzf full_backup.tar.gz -C / \
                   --exclude=/proc \
                   --exclude=/sys \
                   --exclude=/dev \
                   --exclude=/tmp \
                   --exclude=/run \
                   --exclude=/mnt \
                   --exclude=/media
              echo "‚úÖ VPS restored safely."
          else
              echo "‚ö†Ô∏è No backup found. Starting fresh VPS."
          fi

      - name: Start SSHX for remote access
        run: |
          echo "‚öôÔ∏è Starting SSHX..."
          cd $GITHUB_WORKSPACE
          nohup bash -c "curl -sSf https://sshx.io/get | sh -s run > sshx_link.txt 2>&1" &
          sleep 10
          echo "üåê SSHX Link:"
          grep -Eo 'https://sshx.io/[^ ]+' sshx_link.txt || echo "‚ùå SSHX link not found"
          echo "‚úÖ SSHX running."

      - name: Start 10-Minute Split Backup Loop
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "üíæ Starting 10-min split backup loop..."
          cd $GITHUB_WORKSPACE
          
          nohup bash -c "while true; do
              TIMESTAMP=\$(date '+%Y%m%d_%H%M%S')
              BACKUP_FILE=\"vps_backup_\$TIMESTAMP.tar.gz\"
              
              echo \"üì¶ Creating VPS backup \$BACKUP_FILE ...\"
              sudo tar --exclude=/proc \
                       --exclude=/sys \
                       --exclude=/dev \
                       --exclude=/tmp \
                       --exclude=/run \
                       --exclude=/mnt \
                       --exclude=/media \
                       -czf - / | split -b 5000m - ${BACKUP_FILE}.part
              
              echo \"‚úÖ Backup split into parts.\"
              
              mkdir -p vps_backups_temp
              mv ${BACKUP_FILE}.part* vps_backups_temp/
              cd vps_backups_temp
              
              git init -q
              git config user.email 'actions@github.com'
              git config user.name 'github-actions'
              git add --all
              git commit -m \"üíæ Split VPS backup \$TIMESTAMP\" -q || true
              git branch -M vps-backups
              git push -f https://$PAT_TOKEN@github.com/${{ github.repository }} vps-backups >/dev/null 2>&1 || true
              
              cd ..
              rm -rf vps_backups_temp
              echo \"‚úÖ Backup pushed.\"
              
              sleep 600
          done" &
          echo "‚úÖ Backup loop running in background."

      - name: Keep VPS alive
        run: |
          echo "‚è≥ VPS running for 5h30..."
          sleep 19800

      - name: Auto Restart
        if: always()
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
          WORKFLOW_FILE: main.yml
          RESTART_REF: main
        run: |
          echo "‚ôªÔ∏è Triggering automatic restart..."
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $PAT_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/$WORKFLOW_FILE/dispatches" \
            -d "{\"ref\":\"$RESTART_REF\"}"
          echo "‚úÖ Restart request sent!"
